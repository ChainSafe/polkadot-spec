* High level grandpa

#+begin_src plantuml :file grandpa_high_level.png
participant "cli::cli.rs" as cli 
participant "cli::service.rs" as cli_service
participant "client::service::ServiceBuilder" as service_builder
participant "client::service::NetworkService" as network_service
participant "finality_granpa::lib.rs" as sr_gf
participant "finality_granpa::VoterWork" as sr_gf_voter_work
participant "finality_granpa::Envioronment" as sr_gf_env

autoactivate on

cli -> cli_service ++ : new_full_start
cli_service -> service_builder ** : new
return 
cli -> cli_service ++ : new_full
cli_service -> service_builder ++ : with_network_protocol
service_builder -> network_service ** : new
return
cli_service -> network_service ++ : spawn_essential_task
network_service -> sr_gf ++ : run_grandpa_voter 
sr_gf -> sr_gf_voter_work ** #005500 : new
sr_gf_voter_work -> sr_gf_env ** : new
sr_gf -> sr_gf_voter_work ++ : rebuild_voter
sr_gf_voter_work -> Voter ** : new (last completed round, last finalized block)
sr_gf_voter_work -> Voter ++ : poll
return
#+end_src

#+results:
[[file:grandpa_high_level.png]]


* grandpa voter
#+begin_src plantuml :file grandpa_voter.png
autoactivate off

Network -> Voter ++ : poll
  Voter -> Voter ++ : process_incoming
    loop for all messages in global queue
      note over Voter: Only possible message types are Commit and Catchup
      alt it is a Commit message
        Voter -> PastRounds ++ : import_commit
        return
        alt was the commit for a background round
          note over Voter: we are actively voting on this round
          Voter -> Network ++ : process_commit_outcome(for good commit)
              note over Voter: this a customized function defines consequences for good commit.
          return
        else the commit does not belong to any active background round
          note over Voter
            we are not actively voting on this round
            just validate the signature and accept the block as finalized.
          end note
          Voter -> Voter ++ : validate_commit 
            loop for each precommit in all precommits in the commit
              alt  precommit.block !=> commit.target
                break
                end
              end
            end /' loop '/
            alt all precommited blocks >=  commited block
              Voter -> Round ++ : new(no round number and with commit voters and votes)
              return new Round
              loop for each precommit in the commit
                Voter -> Round ++ : import_precommit
                return
                alt if it is an equivocation and the voter has equivocated more than 1
                  note over Voter: result ← bad commit
                  break
                  end
                else 
                  alt if it is a duplication
                    note over Voter: result.#duplicate_vote ← result.#duplicate_vote + 1
                  end
                  alt if the voter is not in voters set
                    note over Voter: result.#invalid voters ← result.#invalid voters + 1
                  end
                end /'if equivocation '/
              end /'loop'/
              alt any voter equivocated more than 1
                note over Voter: result ← bad commit
              else all voters equivocated max once
                Voter -> Round ++ : precommit_ghost
                return
                note over Voter: result.ghost ← new Round precommit-ghost
              end /'max 1 equivocation pre voter '/
            else a precommited block !(>=) than commited block
              note over Voter: result ← bad commit message
            end  /'!(>=) of target '/
          return result
          alt the commit message is valid
            alt the finalized block number > last finalized block number
              note over Voter: last finalized block ← the new finalized block
              Voter -> Enviornment ++ : finalize the new finalized block
              return
            end
            Voter -> Network ++ : process_commit_outcome(for good commit)
              note over Voter: this a customized function defines consequences for good commit.
            return
  
           else the commit message is invalid
             Voter -> Catchup ++ : process_commit_outcome(for bad commit)
               note over Voter: this a customized function defines consequences for bad commit.
             return
           end
        end
      else it is a Catchup message
        Voter -> Voter ++ : vaidate_catchup
          alt catch_up.round_number > best_round_number
            alt all voters in the catch_up belong to the voter set
              alt more than 2/3 of voter prevoted  and more than 2/3 of voter precommited
                Voter -> Round ++ : new(catchup round number and voters)
                return new Round
                loop over all prevotes in catcup round
                  Voter -> Round ++ : import_prevote
                  return
                  alt bad prevote
                    note over Voter: result ← bad catchup
                    break
                    end
                  end
                end
                
                loop over all precommits in catcup round
                  Voter -> Round ++ : import_precommit
                  return
                  alt bad precommit
                    note over Voter: result ← bad catchup
                    break
                  end
                end

                alt if there is no bad prevote or precommit
                  Voter -> Round ++ : state
                  return
                  alt Round state is completable
                    note over Voter: result ← Round
                  else Round state is not completable
                    note over Voter: result ← bad catchup
                  end
                else if there is a bad prevote or precommit
                  note over Voter: result ← bad catchup
                end

              else either less than 2/3 prevoted or less than 2/3 precommited 
                note over Voter: result ← bad catchup
              end
            else catch_up contains voter not in the voting set
              note over Voter: result ← bad catchup
            end 
          else catch_up.round_number <= best_round_numbre
            note over Voter: result ← bad catchup
          end
        return result
        alt result = Good CatchUp 
           note over Voter: catchup_round ← the round the catchup belong to 
           Voter -> VotingRound ++ : make a completed round
           return completed round
           Voter -> VotingRound ++ : new round whose last round to be the completed round 
           return new round
           note over Voter: last_finalized_round ← completed round
           Voter -> Environment ++ : completed (completed round)
           return
           Voter -> Network ++ : process_catchup_outcome(for good catchup)
           return
        else result = Bad Catchup
          Voter -> Network ++ : process_catchup_outcome(for bad catchup)
          return
        end /' good/bad catchup '/
      end /' alt message type '/
    end  /' loop over all messages '/
  return /' process_incoming '/

  Voter -> Voter ++ : prune_background_rounds
    loop Voter -> PastRounds : poll
      alt the poll return a commit TBS
        Voter -> Network  ++: send Commit message
        return
      end 
    end

    loop Voter -> FinalizedNotification : poll
      Voter -> PastRounds : update_finalized
      alt the finalized block number > last finalized block number
        note over Voter: last finalized block ← the new finalized block
        Voter -> Enviornment ++ : finalize the new finalized block
        return
      end
    end
  return /' prune background rounds '/

  Voter -> GlobalOut ++ : send all queued messages
  return
  
  Voter -> Voter ++ : process_best_round
    Voter -> VotingRound ++ : best_round.poll
      VotingRound -> VotingRound ++ : process_incoming
        loop for all received messages for this round
          VotingRound -> VotingRound ++ : handle_vote
            alt it is a prevote message
              VotingRound -> Round ++ : import_prevote
              return
            else it is a precommit message
              VotingRound -> Round ++ : import_precommit
              return
            else it is a primary propose        
              VotingRound -> Round ++ : who is the primary voter?
              return : primary_id
              alt I am the primary voter
                note over VotingRound
                 set primary block as the 
                 one proposed in the 
                 message
                end note
              else I am not the primary
               note over VotingRound: do nothing
              end  
            end /'message type'/
          return
        end /'message loop'/
      return /'process incoming'/

      alt if last_round_state is not empty
        note over VotingRound: we can participate in voting process
        VotingRound -> VotingRound ++ : primary_propose
          VotingRound -> RoundState : current_state?
          alt if this round state is "Start":
            RoundState -> VotingRound : Start
            alt if we are primary
              alt if last round estimate > last round finalized
                VotingRound -> Network ++ : send(PrimaryPropose, last round estimate)
                return
                VotingRound -> RoundState ++ : set State to "Proposed"
                return 
              end
            end
          else anything other state 
            RoundState -> VotingRound : Other states
            note over VotingRound: do nothing
          end
        return

        VotingRound -> VotingRound ++ : prevote
          VotingRound -> RoundState : current_state?
          alt state is "Start" or "Proposed"
            RoundState -> VotingRound : Start or Proposed
            VotingRound -> Round  : completable?
            alt prevote timer is up or votes are completable
              Round --> VotingRound  : completable
                VotingRound --> VotingRound ++ : construct_prevote
                note over VotingRound: Panic! if last round does not have estimate
                  VotingRound --> VotingRound ++ : compute_anscestor_of_best_block
                  alt if we do not have primary_block
                    note over VotingRound : ancester ←  last_round_estimate 
                  else if we have a primary_block
                    note over VotingRound: Panic! if there is no last_round_prevote_ghost
                    alt if primary_block = last_round_prevote_ghost
                      note over VotingRound : ancester ←  primary_block
                    else if #primary_block >= #last_round_prevote_ghost
                      note over VotingRound : ancester ←  last_round_estimate
                    else if #primary_block < #last_round_prevote_ghost (migh not be a desecndent)
                      note over VotingRound
                        if the primary block is in the ancestry of 
                        prevote ghost we vote for the best chain 
                        containing "it?".
                      end note
                      alt last_round_estimitate < primary_block <= last_prevote_ghost 
                        note over VotingRound : ancester ← primary_block
                      else  primary_block ∉ subChain[last_round_estimitate, last_prevote_ghost]
                          note over VotingRound : ancester ← last_round_estimate
                      else last_round_estimitate is not an ancestor of last_prevote_ghost 
                        note over VotingRound : This only happens if there is a massive equivocation
                        note over VotingRound : ancester ← last_round_estimate
                      end /' primary < pg '/
                    end /' primary = pg '/ 
                  end /' no priamyr '/
                return /' compute_anscestor_of_best_block '/
                VotingRound -> Environment ++ : best block of best chain containing the anscestor 
                   note over VotingRound
                     best block is the greatest block on the longest
                     chain which can be finalized by current auth set 
                  end note
                return best block /' best block of best chain '/
              return /' construct_prevote '/

                alt prevote got constructed
              VotingRound --> Envioronment ++ : prevoted
              return
              VotingRound --> Round ++ : set_prevoted_index
              return
              VotingRound --> Network ++ : send prevote message
              return
              VotingRound --> RoundState : set state to "Prevoted"
            else failed to construct prevote
              VotingRound --> RoundState : set state to "None"
              VotingRound --> VotingState : set state to "No"
            end
          end
        else anything other state
          RoundState --> VotingRound  : other states
            note over VotingRound: do nothing
        end
      return
       VotingRound -> VotingRound ++ : precommit
        VotingRound -> RoundState : current_state?
         alt state is "Prevoted"
          RoundState -> VotingRound : "Prevoted"
          VotingRound -> VotingRound ++ : get last round estimate
          return 
          note over VotingRound
            Panic! if last round does not have estimate
            This means we started this round before last
            round is completable
          end note
          VotingRound -> Round ++ : get prevote_ghost
          return
             alt prevote_ghost > last round estimate
                VotingRound --> Round  : completable?

                alt precommit timer is up or votes are completable
                  Round --> VotingRound  : completable

                  VotingRound --> VotingRound ++ : construct_precommit
                    VotingRound -> Round ++ : get prevote_ghost
                    return

                    alt prevote_ghost exsits
                       note over VotingRound : pre-commit candidate ← prevote_ghost
                    else prevote_ghost does not exsits
                      VotingRound -> Round ++ : base
                      return VotingGraph base
                      note over VotingRound : pre-commit candidate ← base
                    end
                    
                  return pre-commit candidate /'construct pre-commit'/

                  VotingRound --> Envioronment ++ : precommited
                  return
                  VotingRound --> Round ++ : set_precommited_index
                  return
                  VotingRound --> Network ++ : send precommit message
                  return

                  VotingRound --> RoundState : set state to "Precommited"
         
                else failed to construct precommit
                  note over VotingRound: do nothing
                end
              else prevote_ghost > last round estimate
                note over VotingRound: do nothing
              end
            else anything other state
              RoundState --> VotingRound  : other states
              note over VotingRound: do nothing
            end
          return /' precommit '/
   
        else last round state is null
          note over VotingRound
            we are just catching up
            do not participate in voting
          end note
        end

        VotingRound -> VotingRound : process_incoming
          note right
            processing our own 
            messages in case we 
            voted
          end note
        
        VotingRound --> Round  : completable?
        alt completable
          Round --> VotingRound  : completable
          alt is last round estimate finalized
            VotingRound --> Voter : Ready
            Voter -> VotingRound: precommited?
            alt current round is Ready and precommited
              Voter -> Voter ++ : compelete best round 
              return
              note over Voter: start next round
            else voter has not precommited
              note over Voter: do not start next round
            end
          else last round estimate is not finalized
            VotingRound --> Voter : Not Ready
            note over Voter: do not start next round
          end
        else votes are not completable
          VotingRound --> Voter : Note Ready
          note over Voter: do not start next round
        end
      return
  Voter --> Voter
Voter --> Network
#+end_src

#+results:
[[file:grandpa_voter.png]]

* grandpa votes
#+begin_src plantuml :file grandpa_votes.png

VotingRound -> Round ++ : import_prevote
  alt voter is not in voters set
     note over Round: just ignore the vote
     Round --> VotingRound : ignore
  else
    Round -> PrevoteTracker ++ : add vote
    return
    alt if it is a duplicate vote
      Round --> VotingRound : duplicate
    else if it is a new vote from new signer
      Round --> VoteGraph ++ : insert vote
      return
      note over Round: equivocation_result ← nothing
    else  if it is an equivocation
      note over Round
        mark the equivocator.
        equivocation_result ← (round number, signer id, vote1, vote2)
      end note
    end /' not a duplicate vote '/
    
    alt #prevotes > 2/3 possible voters
       Round --> VoteGraph ++ : find_ghost_descendent of current_ghost
         note over VoteGraph: specced in grandpa_vote
       return new_gohst
      note over Round 
        current_ghost ← new_gohst
      end note
      /'update only if >2/3'/
      alt we have a ghost
        alt more than 2/3 pre-committed
          Round -> VoteGraph ++ : find anscestor with 2/3 of precommit
          return new finalized
          note over Round: finalized ← new finalized.
          Round -> Round ++ : update-estimate
            note over Round: estimate ← nothing
            loop over anscenstors of the ghost in descending order
              Round -> Round ++ : compute full possible precommit votes for this block
                note over Round: To be Specced
              return
              alt full possible votes > 2/3 threshold 
                note over Round: estimate ← current anscestor
                break
                end
              end
            end /' looping over anscestor '/
          return /' update estimate '/
          alt if we have an estimate 
            alt estimate ≠ ghost
              note over Round: completable ← True
            else if estimate = ghost
              note over Round: completable ← True
              loop over descendent of ghost
                alt full possible precommit votes for current dsecndant  > 2/3 votes
                note over Round: completable ← False
                end
             end /' estimate isn't ghost '/
          else if we do not have an estimate
                note over Round: completable ← Fa            
          end /' no estimate '/
        end /' more than 2/3 pre-commited '/
      end /' we have a ghost '/
    end /' #prevotes > 2/3'/
  end /' voter in voter set '/
return equivocation_result

/'/////////// PRE-COMMIT //////////'/
VotingRound -> Round ++ : import_precommit
  alt voter is not in voters set
     note over Round: just ignore the vote
     Round --> VotingRound : ignore
  else voter is in the voters set
    Round -> PrecommitTracker ++ : add vote
    alt if it is a duplicate vote
      PrecommitTracker --> Round : duplicate
    else if it is a new vote from new signer
      PrecommitTracker --> Round : haven't seen another vote from the voter.
      Round --> VoteGraph ++ : insert vote
      return
      note over Round: equivocation_result ← nothing
    else  if it is an equivocation
      return  voter has voted on block1 and now block2
      note over Round
        mark the equivocator.
        equivocation_result ← (round number, signer id, vote1, vote2)
      end note
    end /' not a duplicate vote '/
    
  end /' voter in voter set '/
return equivocation_result

/'/////////// PRE-COMMIT-GHOST //////////'/
Voter -> Round ++ : update_precommit_ghost
 alt #precommit > 2/3
   Round -> VoteGraph ++ : find_ghost_descendent of current precommit ghost
         note over VoteGraph 
           The GHOST (hash, number) returned will be the 
           block with highest number for which the
	       cumulative votes of descendents and itself > 2/3 of voters.
           TBS
         end note
   return new ghost
   note over Round: precommit ghost ← new ghost
 end
return precommit ghost

#+end_src

#+results:
[[file:grandpa_votes.png]]

* GRANDPA Catchup
#+begin_src plantuml :file grandpa_votes.png

/'/////////// Process catchup request //////////'/
/' finality-grandpa/src/communication/gossip.rs::handle_catch_up_request'/
GossipValidator -> Inner ++ : handle_catch_up_request
  alt request.set_id is not equal to our voter set_id:
     note over Inner: reject-catchup-request
  else if the requester node is not one of our peers
     note over Inner: reject-catchup-request
  else if last completed round < request.round 
     note over Inner: reject-catchup-request
  else construct a catchup response
     note over Inner: construct catch-up
  end /' verify the catchup is legit '/
#+end_src

#+results:
[[file:grandpa_catchup.png]
